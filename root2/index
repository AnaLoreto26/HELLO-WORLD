<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>Words & Images with Matter.js</title>
 
  <style>
    /*----------------------------------------------------------------style-----------------------------------------------------------*/
    html, body {
      margin: 0;
      padding: 0;
      overflow: hidden;
      background: #fefbf6;
    }

    @font-face {
    font-family: NB Regular;
     src: url(NonBureau-Regular.otf);
  }

  @font-face {
    font-family: NB Light;
     src: url(NonBureau-Light.otf);
  }
  
  @font-face {
    font-family: NB Medium;
     src: url(NonBureau-Medium.otf);
  }

  @font-face {
    font-family: Inter;
     src: url(Inter_18pt-SemiBold.ttf);
  }


  body {
    background-color: #020202;
    color:#020202;
    font-size: 18px;
    font-family: Inter;
    src: url(../fonts/Inter_18pt-Regular.ttf);
  }
  
  #page{
    position: relative;
    display: block;
  }
  
/*---------------------------------------------header-------------------------------------------------*/

header{
    position: fixed;
    display: flex;
    flex-direction: row;
    justify-content:space-between;
    padding: 5px;
    width: 100%; 
    background-color: #43FF44; 
    z-index: 1;
}

#titulo{
  /*  background-color: #d5298d; */
  margin-left: 10px;
  display: flex;
  flex-direction: row;
}

#menu{
 /*  background-color: #1faabc; */
  display: flex;
  margin-right: 20px;
}



a,p{
  text-decoration: none;
  color:#020202; 
  font-family: NB REgular;
  transition: all 0.2s ease;
  
  /* ESSENCIAL: força o navegador a reservar espaço para pesos maiores */
  font-synthesis: weight; /* ajuda o navegador a prever mudança */
  margin: 5px;
  text-align: center;
}

.cara p{
   font-family: Inter;
   font-size: 15px;
   font-weight: 500;
}


#menu a:hover {
  font-family: NB medium; /* ou qualquer outra */
 

}



.link1 {
  width: 75px;
  text-align: center;
}

.link2 {
  width: 30px;
}

.link3 {
  width: 55px;
}

.link4 {
  width: 85px;
}

.link5 {
  width: 88px;
}

  </style>
</head>
<body>
<!-- ---------------------------------------------------------HTML - HEADER----------------------------------------------------------------------->
    <header>
      
        <div id="titulo"> <p>////</p> <p>HELLO WORLD</p>    </p> </div>
      
          <div id="menu">
            
           <a href="../aprende/index.html"  class="link1"> APRENDE</a>
            <P>---→</P>
           <a href="../faz/index.html"  class="link2"> FAZ</a> 
            <P>////</P>
           <a href="../pensa/index.html"  class="link3"> PENSA </a> 
            <P>➍</P>
           <a href="../organiza/index.html"  class="link4"> ORGANIZA </a>
           <span  class="cara"><P> ( ͡❛ ͜ʖ ͡❛)</P> </span>
           <a href="../descobre/index.html" class="link5"> DESCOBRE </a>
          </div>
        </header>

        
<!-- ------------------------------HTML - MAIN------------------------------------------------------>
  <main>
    <div id="animation"></div>

  </main>
  
  <script src="https://cdnjs.cloudflare.com/ajax/libs/matter-js/0.19.0/matter.min.js"></script>

  <script>
     /* ----------------------------------------------------------------SCRIPT----------------------------------------------------------------- */ 
    const { Engine, Render, Runner, World, Bodies, Body, Composite, Mouse, MouseConstraint } = Matter;

    const engine = Engine.create();
    const { world } = engine;

    const width = window.innerWidth;
    const height = window.innerHeight;

    const render = Render.create({
      element: document.body,
      engine: engine,
      options: {
        width,
        height,
        wireframes: false,
        background: '#020202'
      }
    });

    Render.run(render);
    Runner.run(Runner.create(), engine);

    // Paredes
    const wallOptions = {
  isStatic: true,
  render: { visible: false } // invisível!
};

const walls = [
  Bodies.rectangle(width / 2, 0, width, 20, wallOptions),           // topo
  Bodies.rectangle(width / 2, height, width, 20, wallOptions),      // fundo
  Bodies.rectangle(0, height / 2, 20, height, wallOptions),         // esquerda
  Bodies.rectangle(width, height / 2, 20, height, wallOptions)      // direita
];

World.add(world, walls);

document.fonts.ready.then(() => {
    // Lista de palavras
    const words = ["FBAUP", "DESIGN", "2025", "HELLO WORLD","CRESCIMENTO", "INSPIRAÇÂO","SUCESSO","CRIATIVIDADE"];
    const greenWords = ["FBAUP", "2025"]; // palavras em verde
    words.forEach((word, i) => {
      const canvas = document.createElement('canvas');
      const ctx = canvas.getContext('2d');
      const fontSize = 40;
      ctx.font = `${fontSize}px Arial`;
      const textWidth = ctx.measureText(word).width;

      canvas.width = textWidth + 20;
      canvas.height = fontSize + 20;
      ctx.font = `${fontSize}px Arial`;
       ctx.fillStyle = greenWords.includes(word) ? " #43FF44" : "#fefbf6"; // aqui a mágica
      ctx.textAlign = "center";
      ctx.textBaseline = "middle";
      ctx.fillText(word, canvas.width / 2, canvas.height / 2);
      const texture = canvas.toDataURL();

      const body = Bodies.rectangle(
        Math.random() * width,
        Math.random() * height,
        canvas.width,
        canvas.height,
        {
          restitution: 0.8,
          render: {
            sprite: {
              texture,
              xScale: 1,
              yScale: 1
            }
          }
        }
      );
      World.add(world, body);
    });
  });

    // Lista de imagens (adicione seus links aqui)
    const images = [
      { src: 'icon1.png', size: 60 },
      { src: 'icon2.png', size: 100 },
      { src: 'icon3.png', size: 20 }
    ];

    images.forEach(({ src, size }) => {
      const body = Bodies.circle(
        Math.random() * width,
        Math.random() * height,
        size / 2,
        {
          restitution: 0.8,
          render: {
            sprite: {
              texture: src,
              xScale: size / 512,
              yScale: size / 512
            }
          }
        }
      );
      World.add(world, body);
    });

    // Controle de mouse (arrastar elementos)
    const mouse = Mouse.create(render.canvas);
    const mouseConstraint = MouseConstraint.create(engine, {
      mouse,
      constraint: {
        stiffness: 0.2,
        render: {
          visible: false
        }
      }
    });
    World.add(world, mouseConstraint);
    render.mouse = mouse;
  </script>
</body>
</html>
